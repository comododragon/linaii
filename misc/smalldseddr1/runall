#!/bin/bash

TMPFILE=$(mktemp --tmpdir tmp.LINADDRXXXX)

runScripter() {
	./scripter $1 $2 $3 $4 $5 $6 $7 2> /dev/null > $TMPFILE
	echo -n "$6,$5,"
	grep -r "| *viv *|.*" $TMPFILE | sed "s/| *viv *|[^|]*| *\([0-9]\+\) *|[^|]*|[^|]*| *\([0-9]\+\) *|/\\1,\\2,/g" | tr -d "\\n"
	grep -r "| *lina *|.*" $TMPFILE | sed "s/| *lina *|[^|]*| *\([0-9]\+\) *|[^|]*|[^|]*| *\([0-9]\+\) *|/\\1,\\2/g" | tr -d "\\n"
	echo ""
}

echo "cat,project,vivl,vivil,linl,linil"

# XXX
# Please note that the projects here are configured to be the most similar to Vivado as possible.
# This means that potential (obvious?) bursts that could be detected with Lina might be barred by the use of P0!
# Also, burst mix is deactivated for all projects, as for now it is not compatible with out-burst analysis
# XXX

# Differences
# Reason 1: Vivado does not burst the transactions outside the innermost loop, while Lina does (I don't see any reason why not to burst).
#           In this case P0 will give exact or almost exact result. P1 will give bursted result, which is desirable but deviates from Vivado;
# Reason 2: Sometimes operations are run in the edges and not on the nodes. For example quite often loop headers have first cycle of operations
#           that will happen in the following nodes, even if loop header has more than one edge to go (and of course it has, it's a loop header!).
#           But in some cases Vivado does not allocate anything to the loop header, while Lina implicitly always do that;
# Reason 3: Difference is caused by instructions with latency or critical path delay that Lina does not implement;
# Reason 4: Vivado does not burst the transactions, but also the unrolled loop leads to duplicate accesses, which apparently are not detected.
#           Probably because SDSoC unrolls the loop BEFORE sending it to Vivado, then burst inside the loop iteration is also not detected!
# Reason 6: Even though both Lina and Vivado correctly burst the innermost loop, there are still differences in the after DDDG (and consequently at
#           the inter DDDG). This is because Vivado isolates the after and before DDDG: read>fadd>write>read>fmul>write. Even with the conservative
#           policy, Lina pipelines both reads (not burst but pipeline, i.e. one readreq instance is called right after the next):
#           read>read>fadd>write>fmul>write.
# Reason 7: Vivado has difficulties detecting bursts that are in form of replicated sequential code as it happens with unroll. For example, creating
#           a kernel that is a manually fully-unrolled loop (all indexes are sequential and explicitly given as constants), Vivado still cannot infer
#           the burst. Lina in this case detects out-burst for the innermost loop, while Vivado does not. I believe this is caused by the automatic
#           unroll performed by Vivado (not SDx!) when banking is active and consequently a loop unroll is performed. I tested this the following way:
#           project b/rw-add2-np, invert the non-perfect statements; compile; still unrolls and inner loop is still not out-bursted; thinks that might
#           be because of the ReadReq from the BEFORE DDDG that can dominate the 4 inner loops and BETWEENS (see Reason 8); remove the first statement;
#           compile; out-bursting the inner loop would not overlap anymore with any dominant ReadReq from BEFORE (thus it could allocate even with
#           conservative policy; still does not out-burst...
# Reason 8: Lina currently does not support packing bursts crossing inner DDDG levels. For example, let's say that in a BEFORE DDDG, several loads are
#           packed and still some bits from the DDR bus is available. Then in the AFTER or BETWEEN DDDG, the data that could've been retrieved (i.e.
#           contiguous) with this spare bits is then loaded from DDR. We could very well NOT have performed this load here and have loaded using the
#           spare data bus at BEFORE, of course if the inner DDDGs between BEFORE and AFTER do not perform any operation that could invalidate this
#           cached load in the meantime. A similar approach applies to store. Even with context as in Lina, we have still some limitations that could
#           only be properly solved if the BEFORE and AFTER DDDGs were built at the same time, because for example if in the AFTER DDDG this cached load
#           is detected and possible, we would have to change the memory region in the BEFORE to acknowledge this new load and avoid conflicts with other
#           reads in the same BEFORE DDDG (recall that conflicts are analysed through the memory regions overlap from the conflicting operations).
#           Vivado performs such optimisation, as with banking + unrolling, it is always reading the whole DDR data width: it reads 4 float words at the
#           BEFORE DDDG, and the values are then used without re-loading on BETWEEN and AFTER DDDGs.

# Normal projects

# Spot on
# P0/P1 indifferent
runScripter M ba bv P1 rw-add2 -
# BV makes no difference
# P0 gives almost exact count, P1 gives the bursted count
# Differences: Reasons 1 and 2
runScripter M ba bv P0 rw-add2-np -
# BV makes no difference
# P0 gives almost exact count, P1 gives the bursted count
# Differences: Reasons 1 and 2
runScripter M ba bv P0 rw-add2-np2 -
# Toggling BV makes no difference
# P0 gives wrong count (since in this case Vivado does burst), P1 gives almost exact count
# Differences: Reason 2
runScripter M ba bv P1 rw-add2-np3 -
# P0 gives almost exact count, P1 bursts where Vivado does not
# Differences: Reason 3 (uitofp, see state 144 of FSM)
runScripter M ba bv P0 rw-seq -

# With inner loop unroll
# In all cases here, deactivating BU increases latency closer to Vivado but still off by almost 100%. See Reason 4

# Activating BA reduces Lina latency since a out-burst is detected, but it gets way off Vivado.
# BV reduces even further as vectorisation possibilities are found.
# P1 has half Vivado's latency, P0 is closer
# Differences: Reason 4
runScripter M ba bv P0 rw-add2 u2
# Same as above, P0 is closer but still a bit off
# Differences: Reason 4
runScripter M ba bv P0 rw-add2-np u2
# Same as above, P0 is closer but still a bit off
# Differences: Reason 4
runScripter M ba bv P0 rw-add2-np2 u2
# Same as above, P0 is closer but still a bit off
# Differences: Reason 4
runScripter M ba bv P0 rw-add2-np3 u2

# With inner loop unroll, comparing to vivado u2p projects, that are manually unrolled and auxiliary variables are
# used to place reads before writes

# P1 gives closer results than P0.
# Activating BA reduces Lina latency since a out-burst is detected, but it gets way off Vivado.
# BV reduces even further as vectorisation possibilities are found.
# Difference of 1 cycle!
runScripter M ba bv P1 rw-add2 u2 u2p | sed "s/u2/u2p/g"
# P1 gives closer results than P0.
# Same as above for BA and BV
# Difference of 1 cycle at the innermost loop
runScripter M ba bv P1 rw-add2-np u2 u2p | sed "s/u2/u2p/g"
# P1 gives closer results than P0.
# Same as above for BA and BV
# Difference of 1 cycle at the innermost loop
runScripter M ba bv P1 rw-add2-np2 u2 u2p | sed "s/u2/u2p/g"
# P1 gives closer results than P0.
# Same as above for BA and BV
# Difference of 1 cycle at the innermost loop
runScripter M ba bv P1 rw-add2-np3 u2 u2p | sed "s/u2/u2p/g"

# With outer loop unroll

# P0 gives closer results than P1.
# BA/BV indifferent
# Differences: Reason 6
runScripter M ba bv P0 rw-add2-np U2

# With outer loop unroll, comparing to vivado u2p projects, that are manually unrolled and auxiliary variables are
# used to place reads before writes

# ???
runScripter M ba bv P1 rw-add2-np U2 U2p | sed "s/U2/U2p/g"

# With memory banking
# Note that projects were manually unrolled to reflect Vivado banking policy
# Also deactivating BA and BV increases latency, which is expected since vivado in these cases pack bursts

# Spot-on
# P0/P1 indifferent
runScripter M BA BV P0 rw-add2 b
# The closest result comes with ba bv P1, but this could be just a coincidence because vectorisation is used by Vivado and should be considered.
# The "reasonable" setup BA BV P0 is way off, since burst aggregation must be active for vectorisation analysis to work, and aggregation enables out-burst
# Differences: Reasons 7 and 8
runScripter M BA BV P0 rw-add2-np b
# Same as rw-add2-np
# Differences: Reason 7
runScripter M BA BV P0 rw-add2-np2 b
# Same as rw-add2-np
# Differences: Reason 7
runScripter M BA BV P0 rw-add2-np3 b

# With pipeline

runScripter M ba bv P0 rw-add2 p

rm -f $TMPFILE
